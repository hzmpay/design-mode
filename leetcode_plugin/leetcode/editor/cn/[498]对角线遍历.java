//ÁªôÂÆö‰∏Ä‰∏™Âê´Êúâ M x N ‰∏™ÂÖÉÁ¥†ÁöÑÁü©ÈòµÔºàM Ë°åÔºåN ÂàóÔºâÔºåËØ∑‰ª•ÂØπËßíÁ∫øÈÅçÂéÜÁöÑÈ°∫Â∫èËøîÂõûËøô‰∏™Áü©Èòµ‰∏≠ÁöÑÊâÄÊúâÂÖÉÁ¥†ÔºåÂØπËßíÁ∫øÈÅçÂéÜÂ¶Ç‰∏ãÂõæÊâÄÁ§∫„ÄÇ 
//
// 
//
// Á§∫‰æã: 
//
// ËæìÂÖ•:
//[
// [ 1, 2, 3 ],
// [ 4, 5, 6 ],
// [ 7, 8, 9 ]
//]
//
//ËæìÂá∫:  [1,2,4,7,5,3,6,8,9]
//
//Ëß£Èáä:
//
// 
//
// 
//
// ËØ¥Êòé: 
//
// 
// ÁªôÂÆöÁü©Èòµ‰∏≠ÁöÑÂÖÉÁ¥†ÊÄªÊï∞‰∏ç‰ºöË∂ÖËøá 100000 „ÄÇ 
// 
// üëç 159 üëé 0


//leetcode submit region begin(Prohibit modification and deletion)
class Solution {
    public int[] findDiagonalOrder(int[][] matrix) {
        int nLen = matrix.length;
        int mLen = matrix[0].length;
        int[] result = new int[nLen * mLen];
        int num = 0;

        // ÊòØÂê¶ÊòØ‰ªé‰∏ãÂæÄ‰∏ä
        boolean isUp = true;

        //
        int i = 0, j = 0;
        b:
        while (true) {
            if (isUp) {
                isUp = !isUp;
                // ‰∏ã -> ‰∏äÔºö
                a:
                while (true) {
                    result[num++] = matrix[i][j];
                    // Âè≥Áßª
                    if (i == 0 && j != mLen - 1) {
                        j = j + 1;
                        break a;
                    }
                    // ‰∏ãÁßª
                    if (j == mLen - 1) {
                        // Âà∞ÊúÄÂêé‰∏Ä‰∏™ËäÇÁÇπ
                        if (i == nLen - 1) {
                            break b;
                        }
                        i = i + 1;
                        break a;
                    }
                    i = i - 1;
                    j = j + 1;
                }
            } else {
                isUp = !isUp;
                // ‰∏ä -> ‰∏ãÔºö
                a:
                while (true) {
                    result[num++] = matrix[i][j];
                    // ‰∏ãÁßª
                    if (j == 0 && i != nLen - 1) {
                        i = i + 1;
                        break a;
                    }
                    // Âè≥Áßª
                    if (i == nLen - 1) {
                        // Âà∞ÊúÄÂêé‰∏Ä‰∏™ËäÇÁÇπ
                        if (j == mLen - 1) {
                            break b;
                        }
                        j = j + 1;
                        break a;
                    }
                    i = i + 1;
                    j = j - 1;
                }
            }
        }
        return result;
    }
}
//leetcode submit region end(Prohibit modification and deletion)
